{"ast":null,"code":"var _jsxFileName = \"/home/duckhanson/final/Logic-Gate-Generator/client/src/components/Coding.jsx\";\nimport React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { sendUserDefinedText as senduserDefinedTextApi, receiveData as receiveDataApi } from '../api/Interface';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Coding = props => {\n  const {\n    usrId,\n    setLoading,\n    setResult,\n    setCurTab\n  } = props;\n\n  const handleSubmit = () => {\n    let inputValue = document.getElementById('codingArea').value;\n    console.log(inputValue); // TODO Async Code\n\n    senduserDefinedTextApi(usrId, inputValue).then(() => {\n      receiveData();\n    }).catch(err => {\n      console.error('Error getting result', err);\n    }); // empty textarea value\n\n    document.getElementById('codingArea').value = '';\n    setCurTab('Result');\n  };\n\n  const receiveData = () => {\n    setLoading(true);\n    receiveDataApi(usrId).then(result => {\n      setResult(result);\n      setLoading(false);\n    }).catch(err => {\n      console.error('Error getting result', err);\n      setLoading(false);\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* Wrapper */\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main\",\n        children: /*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"post featured\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            autoComplete: \"on\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"codingArea\",\n                className: \"form-control\",\n                rows: \"20\",\n                placeholder: \"What would you want to Generate ? --------------------------------------------- Example: c=a&b d=b|c u=c&d --------------------------------------------- Press and Play ! \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Submit\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-dark\",\n              onClick: () => handleSubmit(),\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_c = Coding;\nexport default Coding;\n\nvar _c;\n\n$RefreshReg$(_c, \"Coding\");","map":{"version":3,"sources":["/home/duckhanson/final/Logic-Gate-Generator/client/src/components/Coding.jsx"],"names":["React","Button","sendUserDefinedText","senduserDefinedTextApi","receiveData","receiveDataApi","Coding","props","usrId","setLoading","setResult","setCurTab","handleSubmit","inputValue","document","getElementById","value","console","log","then","catch","err","error","result"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAAQC,mBAAmB,IAAIC,sBAA/B,EAAuDC,WAAW,IAAIC,cAAtE,QAA2F,kBAA3F;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA;AAA/B,MAA4CJ,KAAlD;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACvB,QAAIC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAvD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EAFuB,CAGvB;;AACAV,IAAAA,sBAAsB,CAACK,KAAD,EAAQK,UAAR,CAAtB,CAA0CM,IAA1C,CAAgD,MAAM;AAClDf,MAAAA,WAAW;AACd,KAFD,EAEGgB,KAFH,CAESC,GAAG,IAAI;AACZJ,MAAAA,OAAO,CAACK,KAAR,CAAc,sBAAd,EAAsCD,GAAtC;AACH,KAJD,EAJuB,CASvB;;AACAP,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC,GAA8C,EAA9C;AACAL,IAAAA,SAAS,CAAC,QAAD,CAAT;AACH,GAZD;;AAcA,QAAMP,WAAW,GAAG,MAAM;AACtBK,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,IAAAA,cAAc,CAACG,KAAD,CAAd,CAAsBW,IAAtB,CAA2BI,MAAM,IAAI;AACjCb,MAAAA,SAAS,CAACa,MAAD,CAAT;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHD,EAGGW,KAHH,CAGSC,GAAG,IAAI;AACZJ,MAAAA,OAAO,CAACK,KAAR,CAAc,sBAAd,EAAsCD,GAAtC;AACAZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAND;AAOH,GATD;;AAWA;AAAA;;AACI;AACA;AAAA,6BAEI;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA,+BACI;AAAS,UAAA,SAAS,EAAC,eAAnB;AAAA,kCACI;AAAM,YAAA,YAAY,EAAC,IAAnB;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,qCACQ;AAAU,gBAAA,EAAE,EAAC,YAAb;AAA0B,gBAAA,SAAS,EAAC,cAApC;AAAmD,gBAAA,IAAI,EAAC,IAAxD;AACA,gBAAA,WAAW,EAAC;AADZ;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAgBI;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCACI,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,cAAhB;AAA+B,cAAA,OAAO,EAAE,MAAMG,YAAY,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AA6BH,CAzDD;;KAAMN,M;AA2DN,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport {sendUserDefinedText as senduserDefinedTextApi, receiveData as receiveDataApi} from '../api/Interface'\n\nconst Coding = (props) => {\n    const {usrId, setLoading, setResult, setCurTab} = props;\n\n    const handleSubmit = () => {\n        let inputValue = document.getElementById('codingArea').value;\n        console.log(inputValue);\n        // TODO Async Code\n        senduserDefinedTextApi(usrId, inputValue).then( () => {\n            receiveData();\n        }).catch(err => {\n            console.error('Error getting result', err);\n        });\n        // empty textarea value\n        document.getElementById('codingArea').value = '';\n        setCurTab('Result');\n    }\n\n    const receiveData = () => {\n        setLoading(true);\n        receiveDataApi(usrId).then(result => {\n            setResult(result);\n            setLoading(false);\n        }).catch(err => {\n            console.error('Error getting result', err);\n            setLoading(false);\n        })\n    }\n\n    return (\n        /* Wrapper */\n        <div>\n            {/* Main */}\n            <div id=\"main\">\n                <article className=\"post featured\">\n                    <form autoComplete='on'>\n                        <div className='form-group'>\n                                <textarea id='codingArea' className=\"form-control\" rows='20' \n                                placeholder=\"What would you want to Generate ?\n                                ---------------------------------------------\n                                Example:\n                                c=a&b\n                                d=b|c\n                                u=c&d\n                                ---------------------------------------------\n                                Press and Play !\n                                \"></textarea>\n        \n                        </div>\n                    </form>\n                    <div className=\"Submit\">\n                        <Button variant=\"outline-dark\" onClick={() => handleSubmit()}>Submit</Button>\n                    </div>\n                </article>\n            </div>\n        </div>\n        \n    );\n};\n\nexport default Coding;\n"]},"metadata":{},"sourceType":"module"}